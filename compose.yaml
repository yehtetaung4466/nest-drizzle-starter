services:
  server:
    build:
      context: .
      dockerfile: ./containers/server/Dockerfile
    environment:
      NODE_ENV: production
    depends_on:
      testor:
        condition: service_completed_successfully  # Wait for migration to finish successfully
    env_file:
      - .env.prod
    ports:
      - "8080:8080"
    restart: always  # Ensures the server keeps running

  migration:
    build:
      context: .
      dockerfile: ./containers/migrator/Dockerfile
    env_file:
      - .env.prod
    depends_on:
      db:
        condition: service_healthy
    restart: "no"  # Don't restart the migrator after it completes
  testor:
    build:
      context: .
      dockerfile: ./containers/test/Dockerfile
    depends_on:
      migration:
        condition: service_completed_successfully
    restart: "no" 

  db:
    image: postgres:latest
    restart: always
    user: postgres
    env_file:
      - .env.database
    volumes:
      - db-data:/var/lib/postgresql/data
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 30s
      retries: 5

volumes:
  db-data:

# secrets:
#   db-password:
#     file: secrets/db_password.txt
